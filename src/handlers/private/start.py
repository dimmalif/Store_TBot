import re

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart
from aiogram.types import Message

from src.database.services.repos import UserRepo, InviteRepo
from src.keyboards.inline.inline_markup.users.start_menu import start_menu_kb
from src.keyboards.inline.inline_markup.users.register import register_start_kb

KEY_REGEX = re.compile(r'key-(\d+)')


async def start_cmd(message: Message, user_db: UserRepo):
    user = await user_db.get_user(message.from_user.id)
    if not user:
        text = '–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.–î–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø–µ—Ä–µ–π–¥—ñ—Ç—å –ø–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—é-–∑–∞–ø—Ä–æ—à–µ–Ω–Ω—é –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∑ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è'
        await message.answer(text, reply_markup=register_start_kb())
    else:
        text = f'üè™\n –í–∏ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏ —Ç–æ–≤–∞—Ä –∞–±–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞'
        await message.answer(text, reply_markup=start_menu_kb())


async def invite_start(message: Message, user_db: UserRepo,
                       invite_db: InviteRepo, deep_link: re.Match):

    invite_key = int(deep_link.groups()[-1])
    check_link = await invite_db.get_invite_id(create_link=invite_key)
    if check_link:
        await user_db.add(user_id=message.from_user.id,
                          full_name=message.from_user.full_name,
                          mention=message.from_user.get_mention()
                          )
        text = f'–í–∞—Å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ!\nüè™\n –í–∏ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏ —Ç–æ–≤–∞—Ä –∞–±–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞'
        await message.answer(text, reply_markup=start_menu_kb())


def setup(dp: Dispatcher):
    dp.register_message_handler(invite_start, CommandStart(KEY_REGEX), state='*')
    dp.register_message_handler(start_cmd, CommandStart(), state='*')

